# -*- coding: utf-8 -*-
"""houseprice_pred_LM_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gDJldVP34UZQnyXaAUr6YlznPEx3gN6U
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as pt

df=pd.read_csv('/content/Housing.csv')
df.head()

df.columns

df.shape

df.isnull().sum()

df['furnishingstatus'].unique()

df['furnishingstatus'].value_counts()

df[['bedrooms']].value_counts()

df['stories'].value_counts()

df[['airconditioning','hotwaterheating']].value_counts()

df[['basement','guestroom']].value_counts()

yes_no_cols = ['mainroad','guestroom','basement','hotwaterheating','airconditioning','prefarea']

for col in yes_no_cols:
    df[col] = df[col].map({'yes':1,'no':0})  # map yes/no
    df[col] = df[col].fillna(0).astype(int)    # fill NaN then convert to int

df['furnishingstatus'] = df['furnishingstatus'].map({'furnished':2,'semi-furnished':1,'unfurnished':0})
df['furnishingstatus'] = df['furnishingstatus'].fillna(0).astype(int)

#outlier
q1=df['price'].quantile(0.25)
q3=df['price'].quantile(0.75)

iqr = q3-q1

lb = q1 - 1.5*iqr
up = q3 + 1.5*iqr

outlier1 = df[(df['price']>up) | (df['price']<lb)]
print(outlier1)

sns.boxplot(df,y='price')
plt.title("Outlier of Price")
# plt.ticklabel_format(style='plain', axis='y')  #to remove le 7 which means y axis* 10**7
plt.show()
#since there is no error so no need to remove outlier becoz they can be tiny and very large house

q1=np.quantile(df['area'],0.25)
q3=np.quantile(df['area'],0.75)

iqr = q3-q1

lb = q1 - 1.5*iqr
up = q3 + 1.5*iqr

outlier2 = df[(df['area']>up) | (df['area']<lb)]
print(outlier2)

sns.boxplot(df,y='area')
plt.title("Outiler of Area")
plt.show()
#since there is no error so no need to remove outlier becoz they can be tiny and very large house

sns.histplot(df,x='price',bins=30,kde=True)
plt.title("Price Distribution")
plt.show()
#show how price is distributed in each price range

sns.histplot(df,x='area',bins=20,kde=True)
plt.title('Area Distribution')
plt.show()
#show how area is distributed in each area range

sns.scatterplot(df,x='price',y='area',hue='mainroad')
plt.title("Price vs Area deviation due to mainroad")
plt.show()

top_10_areas = df['area'].value_counts().nlargest(10).index
sns.violinplot(x='area', y='price', data=df[df['area'].isin(top_10_areas)])
plt.xticks(rotation=45)
plt.show()

sns.pairplot(df[['price', 'area', 'bedrooms', 'bathrooms']])
plt.show()

sns.barplot(x='furnishingstatus', y='price', data=df)
plt.xticks(rotation=45)
plt.show()

corr = df.corr(numeric_only=True)

plt.figure(figsize=(10,6))   # make plot bigger
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

useful_feature = corr[abs(corr)>=0.15].index
print("Selected features:", useful_feature.tolist())
df2 = df[useful_feature.to_list()]

"""NOW MODEL TRAINING"""

y = df['price']
# df2 = df2.drop(columns='price')

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(df2,y,test_size=0.2,random_state=42)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

from sklearn.linear_model import LinearRegression
reg = LinearRegression()
reg.fit(x_train,y_train)

train_r2 = r2_score(y_train, reg.predict(x_train))
test_r2 = r2_score(y_test, reg.predict(x_test))

print(f"Train R²: {train_r2}")
print(f"Test R²: {test_r2}")

from sklearn.metrics import r2_score
score=r2_score(y_test,y_pred)
score

from sklearn.linear_model import SGDRegressor
sgd = SGDRegressor(max_iter=1000, learning_rate='invscaling', eta0=0.01, random_state=42)

# Train
sgd.fit(x_train, y_train)

# Predictions
y_pred2 = sgd.predict(x_test)

# Evaluate
r2 = r2_score(y_test, y_pred2)
print("R² score:", r2)